/*
 * Copyright 2023 Syntarou YOSHIDA.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jp.synthtarou.cceditor.view;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JPanel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import jp.synthtarou.cceditor.common.CCGlobalTimer;
import jp.synthtarou.cceditor.common.CCWrapDataList;
import jp.synthtarou.cceditor.view.common.ClipboardMenuItems;
import jp.synthtarou.cceditor.view.common.IPromptForInput;
import jp.synthtarou.cceditor.view.common.MyComboBoxRenderer1;
import jp.synthtarou.cceditor.xml.CCXMLFile;
import jp.synthtarou.cceditor.xml.CCXMLNode;
import jp.synthtarou.cceditor.xml.CCXMLTreeModel;
import jp.synthtarou.cceditor.xml.CCXMLTreeRenderer;

/**
 *
 * @author Syntarou YOSHIDA
 */
public class CCV510XMLTagTree extends javax.swing.JPanel implements IPromptForInput<CCXMLFile> {
    final CCXMLFile _file;
    final CCV500XMLRoot _root;
    final JCheckBoxMenuItem _checkAttribute;
    final JCheckBoxMenuItem _checkTextContent;
    
    /**
     * Creates new form XMLView
     */
    public CCV510XMLTagTree(CCV500XMLRoot root, CCXMLFile file){
        initComponents();
        _file = file;
        _root = root;
        jComboBoxModule.setRenderer(new MyComboBoxRenderer1());

        jComboBoxModule.setModel(_file.listModules());
        CCXMLTreeModel model = new CCXMLTreeModel(_file.getModule(0));
        jTreeDDFile.setModel(model);
        jTreeDDFile.setCellRenderer(new CCXMLTreeRenderer());

        _checkAttribute = new JCheckBoxMenuItem("Show Attributes");
        _checkTextContent = new JCheckBoxMenuItem("Show TextContent");
        
        _checkAttribute.setSelected(CCXMLTreeRenderer._displayAttribute);
        _checkTextContent.setSelected(CCXMLTreeRenderer._displayTextContent);

        _checkAttribute.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                CCXMLTreeRenderer._displayAttribute = _checkAttribute.isSelected();
                jTreeDDFile.updateUI();
            }
        });
        _checkTextContent.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                CCXMLTreeRenderer._displayTextContent = _checkAttribute.isSelected();
                jTreeDDFile.updateUI();
            }
        });

        ClipboardMenuItems clip = new ClipboardMenuItems(jTreeDDFile);
        clip.insertBeforeThis(_checkAttribute);
        clip.insertBeforeThis(_checkTextContent);
        clip.insertBeforeThis(null);
        
        jListWarning.setModel(createWarningListModel());
        new ClipboardMenuItems(jTextFieldXMLPath);

        updateUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTreeDDFile = new javax.swing.JTree();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxModule = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldXMLPath = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListWarning = new javax.swing.JList<>();

        setLayout(new javax.swing.OverlayLayout(this));

        jSplitPane1.setDividerLocation(350);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("XML View"));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jTreeDDFile.setModel(createEmptyMessage());
        jTreeDDFile.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeDDFileValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTreeDDFile);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jScrollPane1, gridBagConstraints);

        jLabel2.setText("Module Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel6.add(jLabel2, gridBagConstraints);

        jComboBoxModule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxModuleActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel6.add(jComboBoxModule, gridBagConstraints);

        jLabel1.setText("File Path");
        jPanel6.add(jLabel1, new java.awt.GridBagConstraints());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel6.add(jLabel4, gridBagConstraints);

        jTextFieldXMLPath.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel6.add(jTextFieldXMLPath, gridBagConstraints);

        jSplitPane1.setTopComponent(jPanel6);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Error View"));
        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.LINE_AXIS));

        jListWarning.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListWarningValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jListWarning);

        jPanel5.add(jScrollPane3);

        jSplitPane1.setBottomComponent(jPanel5);

        add(jSplitPane1);
    }// </editor-fold>//GEN-END:initComponents

    long _lastMoveSequence;

    @Override
    public JPanel getAsPanel() {
        return this;
    }

    @Override
    public String getPromptTitle() {
        return "Choose File";
    }

    @Override
    public Dimension getPromptSize() {
        return new Dimension(700, 600);
    }

    @Override
    public CCXMLFile getPromptResult() {
        return _file;
    }

    @Override
    public boolean validatePromptResult() {
        return true;
    }

    class ViewUpdateTimer implements Runnable {

        long _sequence;

        public ViewUpdateTimer(long seq) {
            _sequence = seq;
        }

        public void run() {
            if (_lastMoveSequence != _sequence) {
                return;
            }
            updateTreeSelected();
        }
    }


    private void jTreeDDFileValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeDDFileValueChanged
        _lastMoveSequence++;

        CCGlobalTimer.letsCountdown(300, new ViewUpdateTimer(_lastMoveSequence));

    }//GEN-LAST:event_jTreeDDFileValueChanged

    private void jComboBoxModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxModuleActionPerformed
        int sel = jComboBoxModule.getSelectedIndex();
        CCXMLTreeModel model = new CCXMLTreeModel(_file.getModule(sel));
        jTreeDDFile.setModel(model);

    }//GEN-LAST:event_jComboBoxModuleActionPerformed

    private void jListWarningValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListWarningValueChanged
        int index = jListWarning.getSelectedIndex();
        if (index >= 0) {
           CCXMLNode node =  _warningListModel.valueOfIndex(index);
           selectNodeOnTree(node);
        }
    }//GEN-LAST:event_jListWarningValueChanged

    void selectNodeOnTree(CCXMLNode node) {
        List<CCXMLNode> path = node.getAsPath();
        
        for (int i = 0; i< path.size(); ++ i) {
            List<CCXMLNode> sub = path.subList(0, i);
            if (sub.size() > 0) {
                jTreeDDFile.expandPath(new TreePath(sub.toArray()));
            }
        }
        jTreeDDFile.setSelectionPath(new TreePath(path.toArray()));
        jTreeDDFile.scrollPathToVisible(new TreePath(path.toArray()));
    }

    public void updateTreeSelected() {
        TreePath selected = jTreeDDFile.getSelectionPath();
        if (selected != null) {
            Object[] path = selected.getPath();
            if (path != null && path.length > 0) {
                CCXMLNode node = (CCXMLNode) path[path.length - 1];
                _root.setTargetNode(node);
            }

        }
    }

    public TreeModel createEmptyMessage() {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Please Select Valid XML File");
        root.setAllowsChildren(false);
        DefaultTreeModel model = new DefaultTreeModel(root);
        return model;
    }

    CCWrapDataList<CCXMLNode> _warningListModel;

    public CCWrapDataList<CCXMLNode> createWarningListModel() {
        CCWrapDataList<CCXMLNode> ret = new CCWrapDataList<>();
        for (CCXMLNode warn :  _file.listWarning()) {
            int line = warn.getLineNumber();
            int col = warn.getColumnNumber();
            ret.addNameAndValue("" + line + ", " + col + ": " + warn.getWarningText(), warn);
        }
        _warningListModel = ret;
        return ret;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBoxModule;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jListWarning;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField jTextFieldXMLPath;
    private javax.swing.JTree jTreeDDFile;
    // End of variables declaration//GEN-END:variables
}
